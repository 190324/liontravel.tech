extend type Query  {
    product(no: String!): R_Product!
    products(
        filter: I_ProductFilter
        order: [String]
        page: Int = 1
        per_page: Int = 25
    ): R_Products!
}

extend type Mutation {
    product(input: I_Product!, no: String): R_Product! @auth
}

type Product {
    no: String!
    name: String!
    list_price: Float
    sale_price: Float!
    brief: String
    desp: String
    qty: Int!
    images: [Storage]!
}

type R_Product {
    code: Int!
    msg: String!
    data: Product
}

type R_Products {
    code: Int!
    msg: String!
    data: ProductsPagination
}

type ProductsPagination {
    page_info: PageInfo!
    edges: [Product]!
}

input I_ProductFilter {
    name: String
    view: String
}

input I_Product {
    name: String!
    qty: Int!
    list_price: Float
    sale_price: Float!
    brief: String
    desp: String
    images: [Upload!]
}